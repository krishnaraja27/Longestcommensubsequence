Given an array of integers, find the length of the longest (strictly) increasing subsequence from the given array.

Example 1:

Input:
N = 16
A = {0,8,4,12,2,10,6,14,1,9,5,13,3,11,7,15}
Output: 
6
Explanation:
There are more than one LIS in this array. One such Longest increasing subsequence is {0,2,6,9,13,15}.

##################################################python code####################################################
class Solution:
    
    # Function to find the length of longest common subsequence in two strings.
    def lcs(self, x, y, s1, s2):
        # Check if either of the strings is None, return None in that case.
        if s1 is None or s2 is None:
            return None
        
        # Initialize a 2D list to store the length of the LCS.
        dp = [[0] * (len(s2) + 1) for _ in range(len(s1) + 1)]
        
        # Fill the dp table to compute the length of LCS.
        for i in range(1, len(s1) + 1):
            for j in range(1, len(s2) + 1):
                if s1[i - 1] == s2[j - 1]:
                    dp[i][j] = dp[i - 1][j - 1] + 1
                else:
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])
        
        # The length of the LCS will be in dp[len(s1)][len(s2)].
        return dp[len(s1)][len(s2)]
